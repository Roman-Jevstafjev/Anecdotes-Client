@page "/admin/anecdotes/create"
@attribute [Authorize(Roles = "Administrator")]
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Create anecdote</PageTitle>

<h3>Create anecdote</h3>

<div class="col-lg-6">
    <EditForm Model="model" OnSubmit="SubmitAsync">
        @if (validationErrors.Any())
        {
            <ul class="text-danger">
                @foreach (var errorMessage in validationErrors)
                {
                    <li>@errorMessage</li>
                }
            </ul>
        }
        <div class="form-group">
            <label for="title">Title</label>
            <InputText id="title" class="form-control" @bind-Value="model.Title" />
        </div>
        <div class="form-group">
            <label for="content">Content</label>
            <InputTextArea id="content" class="form-control" rows="5" @bind-Value="model.Content" />
        </div>
        <div class="form-group">
            <label for="tags">Tags</label>
            <InputText id="tags" class="form-control" @bind-Value="model.Tags" />
        </div>
        <button type="submit" class="btn btn-primary mt-2">Submit</button>
    </EditForm>
</div>

@code {
    private Input model = new();
    private List<string> validationErrors = new();

    private async Task SubmitAsync()
    {
        var httpClient = ClientFactory.CreateClient("AnecdotesApi.AuthenticationClient");

        var response = await httpClient.PostAsJsonAsync<Input>("/api/anecdotes/create", model);

        var result = await response.Content.ReadFromJsonAsync<Result<Anecdote>>();
        if (result is null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong");
            return;
        }

        if (!result.IsSuccess)
        {
            if (!result.ValidationErrors.Any())
            {
                await JsRuntime.InvokeVoidAsync("alert", "Something went wrong");
                return;
            }

            validationErrors.Clear();
            foreach (var error in result.ValidationErrors)
            {
                validationErrors.Add(error.ErrorMessage);
            }

            return;
        }

        NavigationManager.NavigateTo("/admin/anecdotes");
    }

    public class Input
    {
        public string Title { get; set; } = null!;

        public string Content { get; set; } = null!;

        public string Tags { get; set; } = null!;
    }
}
